import{_ as n,e as s}from"./app.ab7b14ba.js";const a={},e=s(`<h1 id="_20-valid-parentheses" tabindex="-1"><a class="header-anchor" href="#_20-valid-parentheses" aria-hidden="true">#</a> 20. Valid Parentheses</h1><blockquote><p>\uBB38\uC790\uC5F4</p></blockquote><h2 id="\u{1F4CB}-\u1106\u116E\u11AB\u110C\u1166" tabindex="-1"><a class="header-anchor" href="#\u{1F4CB}-\u1106\u116E\u11AB\u110C\u1166" aria-hidden="true">#</a> \u{1F4CB} \uBB38\uC81C</h2><p>Given a string s containing just the characters &#39;(&#39;, &#39;)&#39;, &#39;{&#39;, &#39;}&#39;, &#39;[&#39; and &#39;]&#39;, determine if the input string is valid.</p><p>An input string is valid if:</p><p>Open brackets must be closed by the same type of brackets.<br> Open brackets must be closed in the correct order.</p><h2 id="\u{1F449}-\u110B\u1175\u11B8\u110E\u116E\u11AF\u1105\u1167\u11A8" tabindex="-1"><a class="header-anchor" href="#\u{1F449}-\u110B\u1175\u11B8\u110E\u116E\u11AF\u1105\u1167\u11A8" aria-hidden="true">#</a> \u{1F449} \uC785\uCD9C\uB825</h2><p><strong>Example 1:</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: s = &quot;()&quot;
Output: true
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>Example 2:</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: s = &quot;()[]{}&quot;
Output: true
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>Example 3:</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Input: s = &quot;(]&quot;
Output: false
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="\u{1F4DD}-\u1111\u116E\u11AF\u110B\u1175" tabindex="-1"><a class="header-anchor" href="#\u{1F4DD}-\u1111\u116E\u11AF\u110B\u1175" aria-hidden="true">#</a> \u{1F4DD} \uD480\uC774</h2><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">isValid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        brackets <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;)&quot;</span> <span class="token punctuation">:</span> <span class="token string">&quot;(&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;}&quot;</span> <span class="token punctuation">:</span> <span class="token string">&quot;{&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;]&quot;</span> <span class="token punctuation">:</span> <span class="token string">&quot;[&quot;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> i <span class="token keyword">in</span> brackets<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                    <span class="token keyword">return</span> <span class="token boolean">False</span>
                <span class="token keyword">elif</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> brackets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
                    <span class="token keyword">return</span> <span class="token boolean">False</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
        <span class="token keyword">return</span> <span class="token boolean">True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>\uAD04\uD638\uC758 \uC885\uB958\uAC00 \uC138 \uAC00\uC9C0\uB77C \uC870\uAE08 \uAE4C\uB2E4\uB85C\uC6E0\uB358 \uBB38\uC81C\uC600\uB2E4.<br> \uBA3C\uC800 \uAD04\uD638\uAC00 \uC138 \uAC00\uC9C0\uC774\uAE30 \uB54C\uBB38\uC5D0 \uB2EB\uD78C \uAD04\uD638\uB97C key\uB85C \uAC00\uC9C0\uB294 brackets \uB515\uC154\uB108\uB9AC\uB97C \uC120\uC5B8\uD588\uB2E4.</p><p>\uC785\uB825\uC73C\uB85C \uC8FC\uC5B4\uC9C4 s\uB97C \uC21C\uD68C\uD558\uBA70 \uAC01 \uBB38\uC790\uB97C \uC0B4\uD540\uB2E4.<br> \uB9CC\uC57D i\uAC00 brackets.keys()\uC5D0 \uC5C6\uB2E4\uBA74, \uADF8\uB7EC\uB2C8\uAE4C i\uAC00 \uC5EC\uB294 \uAD04\uD638\uB77C\uBA74 stack\uC5D0 \uB123\uB294\uB2E4.</p><p>i\uAC00 \uB2EB\uB294 \uAD04\uD638\uC774\uBA74 \uBA3C\uC800 stack\uC758 \uAE38\uC774\uB97C \uD655\uC778\uD55C\uB2E4.<br> stack\uC774 \uBE44\uC5B4\uC788\uB294\uB370 i\uAC00 \uB2EB\uB294 \uAD04\uD638\uC774\uBA74 \uBC14\uB85C False\uB97C \uB9AC\uD134\uD574 \uAD04\uD638\uAC00 \uC720\uD6A8\uD558\uC9C0 \uC54A\uB2E4\uB294 \uAC83\uC744 \uC54C\uB9B0\uB2E4.<br> stack\uC774 \uBE44\uC5B4\uC788\uC9C0 \uC54A\uB2E4\uBA74 stack\uC5D0\uC11C pop\uD558\uACE0 \uC774\uB97C \uB515\uC154\uB108\uB9AC\uC758 value\uC640 \uD655\uC778\uD574 \uC54C\uB9DE\uC740 \uAD04\uD638\uAC00 \uC544\uB2C8\uB77C\uBA74 \uB610 False\uB97C \uB9AC\uD134\uD55C\uB2E4.</p><p>for\uBB38\uC758 \uC21C\uD68C\uAC00 \uB05D\uB0AC\uB2E4\uBA74 stack\uC758 \uAE38\uC774\uB97C \uD655\uC778\uD55C\uB2E4.<br> \uC774\uB54C \uBE48 \uC2A4\uD0DD\uC774\uB77C\uBA74 s\uB294 \uC720\uD6A8\uD55C \uAD04\uD638\uB4E4\uB85C \uC774\uB8E8\uC5B4\uC84C\uB2E4\uB294 \uB73B\uC774\uACE0 \uC2A4\uD0DD\uC774 \uBE44\uC5B4\uC788\uC9C0 \uC54A\uB2E4\uBA74 s\uAC00 \uC720\uD6A8\uD55C \uAD04\uD638\uAC00 \uC544\uB2C8\uB77C\uB294 \uB73B\uC774\uB2E4.</p>`,19);function p(t,o){return e}var l=n(a,[["render",p],["__file","lc_20.html.vue"]]);export{l as default};
