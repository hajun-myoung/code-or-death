import{_ as p,r as t,o,c as e,a as n,b as c,F as l,d as s,e as u}from"./app.ab7b14ba.js";const i={},r={id:"\u1112\u116E\u110B\u1171-\u1111\u116D\u1100\u1175\u1109\u1175\u11A82",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#\u1112\u116E\u110B\u1171-\u1111\u116D\u1100\u1175\u1109\u1175\u11A82","aria-hidden":"true"},"#",-1),b=s(),m={href:"https://www.acmicpc.net/problem/1935",target:"_blank",rel:"noopener noreferrer"},d=s("\uD6C4\uC704 \uD45C\uAE30\uC2DD2"),y=u(`<p>\uC77C\uBC18\uC801\uC73C\uB85C \uC0AC\uC6A9\uD558\uB294 \uC0AC\uCE59\uC5F0\uC0B0\uC740 \uD53C\uC5F0\uC0B0\uC790(\uC22B\uC790)\uC0AC\uC774\uC5D0 \uC5F0\uC0B0\uC790(+-*/)\uAC00 \uB4E4\uC5B4\uAC00\uB294 \uD615\uD0DC\uB85C \u2018\uC911\uC704\uD45C\uAE30\uC2DD(infix expression)\u2019\uC774\uB77C\uACE0 \uD55C\uB2E4.<br> \uD6C4\uC704\uD45C\uAE30\uC2DD\uC740 \uD53C\uC5F0\uC0B0\uC790\uAC00 \uBA3C\uC800\uC4F0\uC774\uACE0, \uADF8 \uB4A4\uB85C \uD53C\uC5F0\uC0B0\uC790\uAC00 \uB098\uC624\uB294 \uD615\uD0DC\uB97C \uB9D0\uD55C\uB2E4. \uC608\uB97C\uB4E4\uC5B4, <code>4+3</code>\uC758 \uC911\uC704\uD45C\uAE30\uC2DD\uC744 \uD6C4\uC704\uD45C\uAE30\uC2DD\uC73C\uB85C \uBC14\uAFBC\uB2E4\uBA74 <code>43+</code> \uC73C\uB85C \uD45C\uD604\uD560 \uC218 \uC788\uB2E4.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> sys
<span class="token keyword">from</span> collections <span class="token keyword">import</span> deque

<span class="token keyword">def</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">return</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span>

N <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># \uD53C\uC5F0\uC0B0\uC790 \uAC1C\uC218 \uC785\uB825</span>
postfix <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># \uD6C4\uC704\uD45C\uAE30\uC2DD \uC785\uB825</span>
oper <span class="token operator">=</span> <span class="token string">&#39;+-*/&#39;</span>
dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
num <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># \uD53C\uC5F0\uC0B0\uC790 \uB300\uC751\uAC12 \uC785\uB825 \uC22B\uC790 \uC800\uC7A5</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>
  num<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># \uD53C\uC5F0\uC0B0\uC790 \uB300\uC751\uAC12\uC5D0 \uD574\uB2F9\uD560 \uC22B\uC790 \uC785\uB825</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> postfix<span class="token punctuation">:</span>
  <span class="token keyword">if</span> i <span class="token keyword">not</span> <span class="token keyword">in</span> dic <span class="token keyword">and</span> i <span class="token keyword">not</span> <span class="token keyword">in</span> oper<span class="token punctuation">:</span> <span class="token comment"># ABC*+DE/- \uC758 \uACBD\uC6B0 ABCDE</span>
    dic<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># \uD53C\uC5F0\uC0B0\uC790 \uB300\uC751\uAC12 \uB515\uC154\uB108\uB9AC \uD615\uD0DC \uC800\uC7A5</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> postfix<span class="token punctuation">:</span>
  <span class="token keyword">if</span> i <span class="token keyword">not</span> <span class="token keyword">in</span> oper<span class="token punctuation">:</span>
    stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dic<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">:</span>
      a <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
      b <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
      stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span>
    <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">:</span>
      a <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
      b <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
      stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>b<span class="token operator">-</span>a<span class="token punctuation">)</span>
    <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">:</span>
      a <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
      b <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
      stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token operator">*</span>b<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
      a <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
      b <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
      stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>b<span class="token operator">/</span>a<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>stack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div>`,2);function f(w,_){const a=t("ExternalLinkIcon");return o(),e(l,null,[n("h1",r,[k,b,n("a",m,[d,c(a)])]),y],64)}var g=p(i,[["render",f],["__file","bj_1935.html.vue"]]);export{g as default};
