import{_ as e,r as o,o as c,c as l,a as n,b as p,F as u,d as s,e as t}from"./app.ab7b14ba.js";const i={},r=n("h1",{id:"sort",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#sort","aria-hidden":"true"},"#"),s(" sort")],-1),k=n("h2",{id:"_10814-\u1102\u1161\u110B\u1175\u1109\u116E\u11AB-\u110C\u1165\u11BC\u1105\u1167\u11AF",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_10814-\u1102\u1161\u110B\u1175\u1109\u116E\u11AB-\u110C\u1165\u11BC\u1105\u1167\u11AF","aria-hidden":"true"},"#"),s(" 10814 [\uB098\uC774\uC21C \uC815\uB82C]")],-1),b={href:"https://www.acmicpc.net/problem/10814",target:"_blank",rel:"noopener noreferrer"},m=s("<\uB9C1\uD06C>"),d=t(`<div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> data
    mid<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>
    left<span class="token operator">=</span>mergeSort<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>
    right<span class="token operator">=</span>mergeSort<span class="token punctuation">(</span>data<span class="token punctuation">[</span>mid<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    result<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
    leftP<span class="token operator">=</span><span class="token number">0</span>
    rightP<span class="token operator">=</span><span class="token number">0</span>
    <span class="token keyword">while</span> leftP<span class="token operator">&lt;</span><span class="token builtin">len</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token keyword">or</span> rightP<span class="token operator">&lt;</span><span class="token builtin">len</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">:</span>
        leftValue<span class="token operator">=</span>left<span class="token punctuation">[</span>leftP<span class="token punctuation">]</span> <span class="token keyword">if</span> leftP<span class="token operator">&lt;</span><span class="token builtin">len</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">[</span><span class="token string">&#39;100000&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;leftDummy&#39;</span><span class="token punctuation">]</span>
        rightValue<span class="token operator">=</span>right<span class="token punctuation">[</span>rightP<span class="token punctuation">]</span> <span class="token keyword">if</span> rightP<span class="token operator">&lt;</span><span class="token builtin">len</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">[</span><span class="token string">&#39;100000&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;rightDummy&#39;</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token builtin">int</span><span class="token punctuation">(</span>leftValue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token builtin">int</span><span class="token punctuation">(</span>rightValue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            leftP<span class="token operator">+=</span><span class="token number">1</span>
            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>leftValue<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            rightP<span class="token operator">+=</span><span class="token number">1</span>
            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rightValue<span class="token punctuation">)</span>
    <span class="token keyword">return</span> result
<span class="token keyword">def</span> <span class="token function">bj10814</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    n<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    result<span class="token operator">=</span>mergeSort<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> result<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
bj10814<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p><em>&lt;\uD574\uC124&gt;</em></p><p><em>&quot;\uD604\uC7AC \uD53C\uBCF4\uB098\uCE58 \uC218\uB294 \uC804 \uD53C\uBCF4\uB098\uCE58\uC640 \uC804\uC804 \uD53C\uBCF4\uB098\uCE58\uC758 \uC218\uC758 \uD569\uB2C8\uB2E4&quot;\uB77C\uB294 \uB85C\uC9C1\uC744 \uADF8\uB300\uB85C f(n)=f(n-1)+f(-2)\uB85C \uC62E\uACA8\uBCF4\uBA74 return f(n-1)+f(n-2)\uAC00 \uB41C\uB2E4.</em></p><p><em>&lt;\uC608\uC678\uCF00\uC774\uC2A4&gt;0\uBC88\uCA30 \uC218\uC640 1\uBC88\uC9F8 \uC218\uB294 \uC774\uBBF8 \uC544\uB294 \uC0C1\uD0DC\uC5D0\uC11C \uC2DC\uC791\uC744 \uD558\uB294 \uAC83\uC774\uAE30 \uB54C\uBB38\uC5D0 \uBBF8\uB9AC n==0,n==1\uC774\uB77C\uB294 \uC870\uAC74\uC744 \uC8FC\uC5B4\uC57C \uD55C\uB2E4.</em></p><hr><h2 id="_10825-\u1100\u116E\u11A8\u110B\u1167\u11BC\u1109\u116E" tabindex="-1"><a class="header-anchor" href="#_10825-\u1100\u116E\u11A8\u110B\u1167\u11BC\u1109\u116E" aria-hidden="true">#</a> 10825 [\uAD6D\uC601\uC218]</h2>`,6),f={href:"https://www.acmicpc.net/problem/10825",target:"_blank",rel:"noopener noreferrer"},h=s("<\uB9C1\uD06C>"),g=t(`<div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> sys
<span class="token keyword">def</span> <span class="token function">submergeSort</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> data
    mid<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>
    left<span class="token operator">=</span>submergeSort<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>
    right<span class="token operator">=</span>submergeSort<span class="token punctuation">(</span>data<span class="token punctuation">[</span>mid<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    result<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
    leftP<span class="token operator">=</span><span class="token number">0</span>
    rightP<span class="token operator">=</span><span class="token number">0</span>
    <span class="token keyword">while</span> leftP<span class="token operator">&lt;</span><span class="token builtin">len</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token keyword">or</span> rightP<span class="token operator">&lt;</span><span class="token builtin">len</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">:</span>
        leftValue<span class="token operator">=</span>left<span class="token punctuation">[</span>leftP<span class="token punctuation">]</span> <span class="token keyword">if</span> leftP<span class="token operator">&lt;</span><span class="token builtin">len</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">[</span><span class="token string">&#39;leftDummy&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">]</span>
        rightValue<span class="token operator">=</span>right<span class="token punctuation">[</span>rightP<span class="token punctuation">]</span> <span class="token keyword">if</span> rightP<span class="token operator">&lt;</span><span class="token builtin">len</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">[</span><span class="token string">&#39;rightDummy&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token builtin">int</span><span class="token punctuation">(</span>leftValue<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token builtin">int</span><span class="token punctuation">(</span>rightValue<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            leftP<span class="token operator">+=</span><span class="token number">1</span>
            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>leftValue<span class="token punctuation">)</span>
        <span class="token keyword">elif</span> <span class="token builtin">int</span><span class="token punctuation">(</span>leftValue<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token builtin">int</span><span class="token punctuation">(</span>rightValue<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            rightP<span class="token operator">+=</span><span class="token number">1</span>
            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rightValue<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token builtin">int</span><span class="token punctuation">(</span>leftValue<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token builtin">int</span><span class="token punctuation">(</span>rightValue<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                leftP<span class="token operator">+=</span><span class="token number">1</span>
                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>leftValue<span class="token punctuation">)</span>
            <span class="token keyword">elif</span> <span class="token builtin">int</span><span class="token punctuation">(</span>leftValue<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token builtin">int</span><span class="token punctuation">(</span>rightValue<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                rightP<span class="token operator">+=</span><span class="token number">1</span>
                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rightValue<span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> <span class="token builtin">int</span><span class="token punctuation">(</span>leftValue<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token builtin">int</span><span class="token punctuation">(</span>rightValue<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    leftP<span class="token operator">+=</span><span class="token number">1</span>
                    result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>leftValue<span class="token punctuation">)</span>
                <span class="token keyword">elif</span> <span class="token builtin">int</span><span class="token punctuation">(</span>leftValue<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token builtin">int</span><span class="token punctuation">(</span>rightValue<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    rightP<span class="token operator">+=</span><span class="token number">1</span>
                    result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rightValue<span class="token punctuation">)</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    <span class="token keyword">if</span> leftValue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>rightValue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                        leftP<span class="token operator">+=</span><span class="token number">1</span>
                        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>leftValue<span class="token punctuation">)</span>
                    <span class="token keyword">else</span><span class="token punctuation">:</span>
                        rightP<span class="token operator">+=</span><span class="token number">1</span>
                        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rightValue<span class="token punctuation">)</span>
    <span class="token keyword">return</span> result
<span class="token keyword">def</span> <span class="token function">bj10825</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    n<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    result<span class="token operator">=</span>submergeSort<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> result<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
bj10825<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br></div></div><p><em>&lt;\uD574\uC124&gt;</em></p><p><em>&quot;\uD604\uC7AC \uD53C\uBCF4\uB098\uCE58 \uC218\uB294 \uC804 \uD53C\uBCF4\uB098\uCE58\uC640 \uC804\uC804 \uD53C\uBCF4\uB098\uCE58\uC758 \uC218\uC758 \uD569\uB2C8\uB2E4&quot;\uB77C\uB294 \uB85C\uC9C1\uC744 \uADF8\uB300\uB85C f(n)=f(n-1)+f(-2)\uB85C \uC62E\uACA8\uBCF4\uBA74 return f(n-1)+f(n-2)\uAC00 \uB41C\uB2E4.</em></p><p><em>&lt;\uC608\uC678\uCF00\uC774\uC2A4&gt;0\uBC88\uCA30 \uC218\uC640 1\uBC88\uC9F8 \uC218\uB294 \uC774\uBBF8 \uC544\uB294 \uC0C1\uD0DC\uC5D0\uC11C \uC2DC\uC791\uC744 \uD558\uB294 \uAC83\uC774\uAE30 \uB54C\uBB38\uC5D0 \uBBF8\uB9AC n==0,n==1\uC774\uB77C\uB294 \uC870\uAC74\uC744 \uC8FC\uC5B4\uC57C \uD55C\uB2E4.</em></p><hr>`,5);function y(w,_){const a=o("ExternalLinkIcon");return c(),l(u,null,[r,k,n("blockquote",null,[n("p",null,[n("a",b,[m,p(a)])])]),d,n("blockquote",null,[n("p",null,[n("a",f,[h,p(a)])])]),g],64)}var P=e(i,[["render",y],["__file","sort.html.vue"]]);export{P as default};
